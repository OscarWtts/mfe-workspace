name: CI/CD Pipeline - Build, Test, and Deploy

on:
  push:
    tags: ['v*']  # Solo ejecutar con tags que empiecen con 'v'

env:
  PROJECT_ID: mfe-project-464600
  REGION: us-central1
  REPO_NAME: mfe-registry
  CLUSTER_NAME: mfe-cluster
  CLUSTER_ZONE: us-central1
  REGISTRY_HOST: us-central1-docker.pkg.dev

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      mfe-host: ${{ steps.filter.outputs.mfe-host }}
      mfe-console: ${{ steps.filter.outputs.mfe-console }}
      k8s: ${{ steps.filter.outputs.k8s }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            mfe-host:
              - 'mfe-host/**'
            mfe-console:
              - 'mfe-console/**'
            k8s:
              - 'k8s/**'

  test:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.mfe-host == 'true' || needs.changes.outputs.mfe-console == 'true' }}
    strategy:
      matrix:
        app: [mfe-host, mfe-console]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.app }}/package-lock.json

      - name: Install dependencies
        run: |
          cd ${{ matrix.app }}
          npm ci

      - name: Run linting
        run: |
          cd ${{ matrix.app }}
          npm run lint

      - name: Run tests
        run: |
          cd ${{ matrix.app }}
          npm test -- --watchAll=false --coverage

      - name: Build application
        run: |
          cd ${{ matrix.app }}
          npm run build

  build-and-push:
    runs-on: ubuntu-latest
    needs: [changes, test]
    if: startsWith(github.ref, 'refs/tags/')  # Solo ejecutar con tags
    strategy:
      matrix:
        include:
          - app: mfe-host
            build-args: |
              VITE_CONSOLE_REMOTE_URL=http://34.54.233.86/console/assets/remoteEntry.js
          - app: mfe-console
            build-args: |
              VITE_BASE_URL=/console/
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Google Cloud authentication
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Configure Docker to use Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.REGISTRY_HOST }}

      - name: Generate image tag
        id: image-tag
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "tag=dev-${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      - name: Build and push ${{ matrix.app }}
        run: |
          IMAGE_URI="${{ env.REGISTRY_HOST }}/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ matrix.app }}:${{ steps.image-tag.outputs.tag }}"
          
          docker build \
            ${{ matrix.build-args && '--build-arg' }} ${{ matrix.build-args }} \
            -t $IMAGE_URI \
            ./${{ matrix.app }}
          
          docker push $IMAGE_URI
          
          echo "Built and pushed: $IMAGE_URI"

  deploy:
    runs-on: ubuntu-latest
    needs: [changes, build-and-push]
    if: startsWith(github.ref, 'refs/tags/')  # Solo ejecutar con tags
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Google Cloud authentication
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }} \
            --zone ${{ env.CLUSTER_ZONE }} \
            --project ${{ env.PROJECT_ID }}

      - name: Deploy to GKE
        run: |
          echo "Deploying to GKE cluster..."
          kubectl apply -f k8s/

      - name: Update deployment images
        run: |
          # Get the version tag
          VERSION_TAG=${GITHUB_REF#refs/tags/}
          echo "Deploying version: $VERSION_TAG"
          
          # Update images to the specific version
          kubectl set image deployment/mfe-host mfe-host=${{ env.REGISTRY_HOST }}/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/mfe-host:$VERSION_TAG
          kubectl set image deployment/mfe-console mfe-console=${{ env.REGISTRY_HOST }}/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/mfe-console:$VERSION_TAG

      - name: Wait for deployment rollout
        run: |
          echo "Waiting for deployments to be ready..."
          kubectl rollout status deployment/mfe-host --timeout=600s
          kubectl rollout status deployment/mfe-console --timeout=600s

      - name: Verify deployment health
        run: |
          echo "=== Deployment Status ==="
          kubectl get deployments -o wide
          echo ""
          echo "=== Pods Status ==="
          kubectl get pods -o wide
          echo ""
          echo "=== Services ==="
          kubectl get services
          echo ""
          echo "=== Ingress Status ==="
          kubectl get ingress -o wide

      - name: Test endpoints
        run: |
          # Wait for ingress to be ready
          echo "Waiting for ingress to be ready..."
          kubectl wait --for=condition=Ready ingress/mfe-ingress --timeout=300s
          
          # Get the external IP
          EXTERNAL_IP=$(kubectl get ingress mfe-ingress -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "External IP: $EXTERNAL_IP"
          
          # Test endpoints with retries
          echo "Testing host endpoint..."
          for i in {1..5}; do
            if curl -f -s -I http://$EXTERNAL_IP/ > /dev/null; then
              echo "‚úÖ Host endpoint is healthy"
              break
            else
              echo "‚ùå Host endpoint test failed (attempt $i/5)"
              sleep 10
            fi
          done
          
          echo "Testing console endpoint..."
          for i in {1..5}; do
            if curl -f -s -I http://$EXTERNAL_IP/console/ > /dev/null; then
              echo "‚úÖ Console endpoint is healthy"
              break
            else
              echo "‚ùå Console endpoint test failed (attempt $i/5)"
              sleep 10
            fi
          done

      - name: Notify deployment success
        if: success()
        run: |
          echo "üéâ Deployment completed successfully!"
          echo "Host: http://$(kubectl get ingress mfe-ingress -o jsonpath='{.status.loadBalancer.ingress[0].ip}')/"
          echo "Console: http://$(kubectl get ingress mfe-ingress -o jsonpath='{.status.loadBalancer.ingress[0].ip}')/console/"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed!"
          echo "=== Pod Logs ==="
          kubectl logs -l app=mfe-host --tail=50
          kubectl logs -l app=mfe-console --tail=50
          echo "=== Events ==="
          kubectl get events --sort-by=.metadata.creationTimestamp
