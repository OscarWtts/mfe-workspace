name: Health Check and Monitoring

on:
  schedule:
    # Run every 5 minutes
    - cron: '*/5 * * * *'
  workflow_dispatch:

env:
  PROJECT_ID: mfe-project-464600
  REGION: us-central1
  CLUSTER_NAME: mfe-cluster
  CLUSTER_ZONE: us-central1

jobs:
  health-check:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Google Cloud authentication
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }} \
            --zone ${{ env.CLUSTER_ZONE }} \
            --project ${{ env.PROJECT_ID }}

      - name: Check cluster health
        run: |
          echo "=== Cluster Status ==="
          kubectl cluster-info
          
          echo "=== Node Status ==="
          kubectl get nodes -o wide
          
          echo "=== Deployment Status ==="
          kubectl get deployments -o wide
          
          echo "=== Pod Status ==="
          kubectl get pods -o wide
          
          echo "=== Service Status ==="
          kubectl get services -o wide
          
          echo "=== Ingress Status ==="
          kubectl get ingress -o wide

      - name: Check deployment health
        run: |
          # Check if deployments are ready
          HOST_READY=$(kubectl get deployment mfe-host -o jsonpath='{.status.readyReplicas}')
          HOST_DESIRED=$(kubectl get deployment mfe-host -o jsonpath='{.status.replicas}')
          
          CONSOLE_READY=$(kubectl get deployment mfe-console -o jsonpath='{.status.readyReplicas}')
          CONSOLE_DESIRED=$(kubectl get deployment mfe-console -o jsonpath='{.status.replicas}')
          
          echo "MFE Host: $HOST_READY/$HOST_DESIRED ready"
          echo "MFE Console: $CONSOLE_READY/$CONSOLE_DESIRED ready"
          
          if [ "$HOST_READY" != "$HOST_DESIRED" ]; then
            echo "‚ö†Ô∏è  MFE Host deployment not fully ready"
            kubectl describe deployment mfe-host
            kubectl logs -l app=mfe-host --tail=20
            exit 1
          fi
          
          if [ "$CONSOLE_READY" != "$CONSOLE_DESIRED" ]; then
            echo "‚ö†Ô∏è  MFE Console deployment not fully ready"
            kubectl describe deployment mfe-console
            kubectl logs -l app=mfe-console --tail=20
            exit 1
          fi
          
          echo "‚úÖ All deployments are healthy"

      - name: Test external endpoints
        run: |
          # Get external IP
          EXTERNAL_IP=$(kubectl get ingress mfe-ingress -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          
          if [ -z "$EXTERNAL_IP" ]; then
            echo "‚ùå No external IP found for ingress"
            exit 1
          fi
          
          echo "Testing endpoints at IP: $EXTERNAL_IP"
          
          # Test host endpoint
          HOST_STATUS=$(curl -o /dev/null -s -w "%{http_code}" http://$EXTERNAL_IP/)
          if [ "$HOST_STATUS" == "200" ]; then
            echo "‚úÖ Host endpoint is healthy (HTTP $HOST_STATUS)"
          else
            echo "‚ùå Host endpoint is unhealthy (HTTP $HOST_STATUS)"
            exit 1
          fi
          
          # Test console endpoint
          CONSOLE_STATUS=$(curl -o /dev/null -s -w "%{http_code}" http://$EXTERNAL_IP/console/)
          if [ "$CONSOLE_STATUS" == "200" ]; then
            echo "‚úÖ Console endpoint is healthy (HTTP $CONSOLE_STATUS)"
          else
            echo "‚ùå Console endpoint is unhealthy (HTTP $CONSOLE_STATUS)"
            exit 1
          fi

      - name: Check resource usage
        run: |
          echo "=== Resource Usage ==="
          kubectl top nodes --use-protocol-buffers=false 2>/dev/null || echo "Metrics server not available"
          kubectl top pods --use-protocol-buffers=false 2>/dev/null || echo "Pod metrics not available"

      - name: Check for failed pods
        run: |
          FAILED_PODS=$(kubectl get pods --field-selector=status.phase=Failed -o jsonpath='{.items[*].metadata.name}')
          if [ -n "$FAILED_PODS" ]; then
            echo "‚ùå Found failed pods: $FAILED_PODS"
            for pod in $FAILED_PODS; do
              echo "=== Logs for $pod ==="
              kubectl logs $pod
            done
            exit 1
          else
            echo "‚úÖ No failed pods found"
          fi

      - name: Notify on failure
        if: failure()
        run: |
          echo "üö® Health check failed!"
          echo "Cluster: ${{ env.CLUSTER_NAME }}"
          echo "Time: $(date)"
          echo "Check the logs above for details."
